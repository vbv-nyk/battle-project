(()=>{"use strict";var n={28:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"body {\n    height: 100vh;\n    max-height: 100vh;\n    background-color: rgb(6, 5, 5);\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n}\n\n.game-name {\n    padding-left: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    font-size: xx-large;\n    font-weight: bolder;\n    color: rgb(237, 237, 94);\n}\n\n.boards-container {\n    display: flex;\n    gap: 30px;\n    height: max-content;\n    justify-content: center;\n    align-items: center;\n}\n\n.board-container {\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-auto-rows: 50px;\n    gap: 1px;\n}\n\n.board-item {\n    background-color: rgb(42, 42, 50);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    color: white;\n}\n\n.axis {\n    padding: 15px;\n    background-color: rgb(105, 154, 154);\n    color: wheat;\n    font-weight: bolder;\n    font-size: large;\n    border: 1px solid rgb(130, 130, 175);\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,iBAAiB;IACjB,8BAA8B;IAC9B,aAAa;IACb,sBAAsB;IACtB,6BAA6B;AACjC;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;IACnB,mBAAmB;IACnB,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,oBAAoB;IACpB,QAAQ;AACZ;;AAEA;IACI,iCAAiC;IACjC,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,oCAAoC;IACpC,YAAY;IACZ,mBAAmB;IACnB,gBAAgB;IAChB,oCAAoC;AACxC",sourcesContent:["body {\n    height: 100vh;\n    max-height: 100vh;\n    background-color: rgb(6, 5, 5);\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n}\n\n.game-name {\n    padding-left: 100px;\n    margin-left: auto;\n    margin-right: auto;\n    font-size: xx-large;\n    font-weight: bolder;\n    color: rgb(237, 237, 94);\n}\n\n.boards-container {\n    display: flex;\n    gap: 30px;\n    height: max-content;\n    justify-content: center;\n    align-items: center;\n}\n\n.board-container {\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-auto-rows: 50px;\n    gap: 1px;\n}\n\n.board-item {\n    background-color: rgb(42, 42, 50);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    color: white;\n}\n\n.axis {\n    padding: 15px;\n    background-color: rgb(105, 154, 154);\n    color: wheat;\n    font-weight: bolder;\n    font-size: large;\n    border: 1px solid rgb(130, 130, 175);\n}"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var u=0;u<n.length;u++){var d=[].concat(n[u]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],u=r.base?s[0]+r.base:s[0],d=a[u]||0,l="".concat(u," ").concat(d);a[u]=d+1;var f=t(l),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)e[f].references++,e[f].updater(A);else{var p=o(A,r);r.byIndex=c,e.splice(c,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=r(n,o),u=0;u<a.length;u++){var d=t(a[u]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.nc=void 0,(()=>{var n={};t.r(n),t.d(n,{Vo:()=>I,XM:()=>w,_X:()=>S});var e=t(379),r=t.n(e),o=t(795),a=t.n(o),i=t(569),c=t.n(i),s=t(565),u=t.n(s),d=t(216),l=t.n(d),f=t(589),A=t.n(f),p=t(28),m={};m.styleTagTransform=A(),m.setAttributes=u(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),r()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const h=document.querySelector("body"),b=document.querySelector(".boards-container");function g(n){const e=document.createElement("div");e.classList.add("board-container");let t=0;for(let r=0;r<10;r++)for(let o=0;o<10;o++){const a=document.createElement("div");a.classList.add("board-item"),a.classList.add(`board-${n}`),a.setAttribute("data-num",t),a.addEventListener("click",(e=>{1===n?I.hitCord(r,o,e.target.dataset.num):2===n&&w.hitCord(r,o,e.target.dataset.num),I.checkBoard()?I.displayWinner():w.checkBoard()&&w.displayWinner()})),e.append(a),t++}b.append(e)}b.classList.add("boards-container"),h.append(b),g(1),g(2);const C=document.querySelector(".axis");function x(n){const e={hitCount:0,isSunk:!1,length:n},t=function(){return e.hitCount++,e.hitCount==e.length&&(e.isSunk=!0),{ship:e,hit:t}};return{ship:e,hit:t}}const v=document.querySelector(".axis");function y(n){let e=2,t=[],r=[];function o(){for(let n=0;n<10;n++){r[n]=[];for(let e=0;e<10;e++)r[n][e]=!1}return r}function a(o,a,i,c){if(t[e]=new x(e),o>9||a>9)return!1;if("x-axis"==i){if(a+e>10)return!1;for(let n=a;n<a+e;n++)if(r[o][n]>=1)return!1;for(let t=a;t<a+e;t++)r[o][t]=e,document.querySelector(`.board-${n}.board-item[data-num="${Number(c)+(t-a)}"]`).textContent=e;e++}else{if(o+e>10)return!1;for(let n=o;n<o+e;n++)if(r[n][a]>=1)return!1;for(let t=o;t<o+e;t++)r[t][a]=e,document.querySelector(`.board-${n}.board-item[data-num="${Number(c)+10*(t-o)}"]`).textContent=e;e++}return 6==e&&"1"==n&&(w.enabled=!0),!0}function i(){return r.every((function(n){return n.every((function(n){return 0==n}))}))}return{boardInnit:(o(),void o()),hitCord:function(o,i,c){const s=document.querySelector(`.board-${n}.board-item[data-num="${c}"]`);return e>5?!1!==this.enabled&&0!==r[o][i]&&(0==r[o][i]?(r[o][i]=0,s.textContent="0"):(t[r[o][i]].hit(),r[o][i]=0,s.textContent="X"),"1"==this.name||function(){for(;;){let n=0,e=Math.floor(100*Math.random());for(let t=0;t<10;t++)for(let r=0;r<10;r++){if(I.enabled=!0,n==e&&0!==I.board[t][r])return I.hitCord(t,r,e),I.enabled=!1,!0;n++}}}()):a(o,i,v.textContent,c)},clearBoard:o,createShip:a,board:r,checkBoard:i,ships:t,name:n,enabled:!0,count:e,displayWinner:function(){return!!i()&&("1"==n?alert("Computer won"):alert("Player won"),S(),!0)}}}const B=document.querySelector(".axis");B.addEventListener("click",(()=>{"x-axis"==B.textContent?B.textContent="y-axis":B.textContent="x-axis"}));let I=new y(1),w=new y(2);function S(){!function(){const n=document.querySelectorAll(".board-item");for(let e of n)e.textContent=""}(),I=new y(1),I.enabled=!1,w=new y(2),function(){let n=2;for(;n<=5;){let e=0,t=Math.floor(100*Math.random()),r=Math.round(Math.random());C.textContent=r?"x-axis":"y-axis";for(let r=0;r<10;r++)for(let o=0;o<10;o++)e==t&&w.hitCord(r,o,t)&&n++,e++;w.enabled=!1}}(),B.textContent="x-axis"}S()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,